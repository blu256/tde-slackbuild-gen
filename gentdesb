#!/bin/env bash
VERSION="0.8"

# TODO: * Verbosity for variants other than CMake
#       * Storing CMake flags in a file

# Import config, if found
config=""
for cdir in "$(dirname $0)" "/etc" "$HOME" "$(pwd)"
do
	[ -f $cdir/.gentdesb.cfg ] && config=$cdir/.gentdesb.cfg
	[ -f $cdir/gentdesb.cfg ] && config=$cdir/gentdesb.cfg
done

[ -n "$config" ] && {
	echo -e "Reading configuration from '$config'\n"
	set -a
	. $config
	set +a
}

unset config, cdir


[ -z $1 ] && {
	cat <<EOF
usage: $(basename $0) {program dir} [package name]...

There must be a subdirectory named after the program with
the program's source code for this to work.

You can override the SlackBuild and package name by
passing a second argument to the script.
EOF
	exit 0
}


# Store arguments
SRCDIR=$1
[ -n $2 ] && PKGNAME_OVERRIDE=$2 # override

# A splash of some sort
cat <<EOF
---
GenTDESB $VERSION
  Copyright © 2021 Mavridis Philippe

Distributed under the terms of the BSD single-clause licence.
---

EOF

# Try writing a test file (saves from lots of frustration
# in case the SlackBuild cannot be written in the current
# directory)
touch .a-test 2>/dev/null || {
	echo "+ Error: no writing permissions in '`pwd`'!"
	exit 5
}
rm .a-test

# TDE installation prefix. Can be overriden in gentdesb.cfg
# Then the question is not shown at all
[ -z $TDEPREFIX ] && {
	TDEPREFIX=`tde-config --prefix`
	read -p "TDE prefix? [$TDEPREFIX] " TDEPREFIX_OVERRIDE
	[ -n "$TDEPREFIX_OVERRIDE" ] && TDEPREFIX=$TDEPREFIX_OVERRIDE
}

[ -d "/etc/trinity" ] && TDESYSCONFDIR="/etc/trinity"
[ -d "/etc/tde" ]     && TDESYSCONFDIR="/etc/tde"
read -p "TDE configuration directory? [$TDESYSCONFDIR] " TDESYSCONFDIR_OVERRIDE
[ -n "$TDESYSCONFDIR_OVERRIDE" ] && TDESYSCONFDIR=$TDESYSCONFDIR_OVERRIDE

[[ -d $TDEPREFIX/lib/trinity || -d $TDEPREFIX/lib64/trinity ]] && TDELIBDIRNAME=trinity
[[ -d $TDEPREFIX/lib/tde     || -d $TDEPREFIX/lib64/tde     ]] && TDELIBDIRNAME=tde
[ -n "$TDELIBDIRNAME" ] || {
	echo "+ TDE libraries path not found!"
	echo "  usually they are located in a 'trinity' directory under libraries path."
	exit 3
}

[ -d $SRCDIR ] || {
	echo "+ Error: directory does not exist!"
	exit 1
}

CWD=`pwd` ; cd $SRCDIR

echo "- Determining package metadata"
PROGNAME=$(basename `pwd`)
echo -e "  - Program name:\t$PROGNAME"

[ -n "$PKGNAME_OVERRIDE" ] \
	&& { PKGNAME=$PKGNAME_OVERRIDE; unset PKGNAME_OVERRIDE; } \
	|| PKGNAME=$PROGNAME
echo -e "  - Package name:\t$PKGNAME"

#[ -d .git ] \
#	&& PKGTAG="_$(git branch --show-current)" \
#	|| PKGTAG="_tde"
PKGTAG="_tde"
echo -e "  - Package tag:\t$PKGTAG"

echo "- Determining build method"
[ -f configure.py ]			&& BUILDWITH="configure.py"
[ -f setup.py ]				&& BUILDWITH="setup.py"
[ -f configure -o -f Makefile.am ]	&& BUILDWITH="Autotools"
[ -f CMakeLists.txt ]			&& BUILDWITH="CMake"

echo -e "  - Build method:\t${BUILDWITH:-none}"
[ -z $BUILDWITH ] && {
	echo "+ Error: I don't know how to build this package!!"
	exit 2
}

# TODO for configure.py:  pyqt_version_str = "3.18.1", might not be the only case
echo "- Determining package version"
PROGVER=''
[ "$BUILDWITH" == "configure.py" ] \
	&& PROGVER=`grep -E "pyqt_version_str\s*=\s*\"[0-9.]*\"" setup.py|sed 's:[",= ]::g'|sed 's:pyqt_version_str::'`
[ "$BUILDWITH" == "setup.py" ] \
	&& PROGVER=`grep -E "version\s*=\s*\"[0-9.]*\"" setup.py|sed 's:[",= ]::g'|sed 's:version::'`
[ "$BUILDWITH" == "Autotools" ] \
	&& PROGVER=`grep -E "AM_INIT_AUTOMAKE\s*\(\s*VERSION" configure.in.in|sed 's:[()]::g'|cut -d' ' -f2`
[ "$BUILDWITH" == "CMake" ] \
	&& PROGVER=`grep -E "set\s*\(\s*VERSION" CMakeLists.txt|sed 's:[()]::g'|cut -d' ' -f3`

[ -z $PKGVER ] && {
	echo "  + Warning: cannot guess package version (will use 'git')"
	PROGVER="git"
} || echo -e "  - Package version:\t${PROGVER}"


# Build mode. Can be overriden in gentdesb.cfg
[ -z $BUILDMODE ] && {
	DEFAULT_BUILD_MODE="Release"
	while [ "${BUILD_MODE}" != "Debug" -a "${BUILD_MODE}" != "Release" ]
	do
		read -p "Build mode ('R'elease/'D'ebug)? [${DEFAULT_BUILD_MODE:0:1}] " bmode
		case "${bmode,,}" in
			"r") BUILD_MODE="Release";;
			"d") BUILD_MODE="Debug";;
			"")  BUILD_MODE=$DEFAULT_BUILD_MODE;; # default
		esac
	done
	unset DEFAULT_BUILD_MODE, bmode
}

echo -e "  - CMake build type:\t$CMAKE_BUILDTYPE"

echo "- Configuring SlackBuild"
[ "$BUILDWITH" == "CMake" ] && {
	echo -e "  - CMake build type:\t$BUILD_MODE"

	# Use ninja?
	DEFAULT_CMAKE_MAKETOOL="make"
	DEFAULT_CMAKE_GENERATOR="Unix Makefiles"
	which ninja >/dev/null 2>&1 && {
		while [ "${CMAKE_MAKETOOL}" != "make" -a "${CMAKE_MAKETOOL}" != "ninja" ]
		do
			read -p "  Use ('m'ake/'n'inja)? [${DEFAULT_CMAKE_MAKETOOL:0:1}] " mtool
			case "${mtool,,}" in
				"m") 
					CMAKE_GENERATOR="Unix Makefiles"
					CMAKE_MAKETOOL="make";;
				"n")
					CMAKE_GENERATOR="Ninja"
					CMAKE_MAKETOOL="ninja";;
				"") # default
					CMAKE_GENERATOR=$DEFAULT_CMAKE_GENERATOR
					CMAKE_MAKETOOL=$DEFAULT_CMAKE_MAKETOOL;;
			esac
		done
		unset mtool
	} || {
		CMAKE_GENERATOR=$DEFAULT_CMAKE_GENERATOR
		CMAKE_MAKETOOL=$DEFAULT_CMAKE_MAKETOOL
	}
	unset DEFAULT_CMAKE_MAKETOOL, DEFAULT_CMAKE_GENERATOR

	# Determine verbosity flags
	case "$CMAKE_MAKETOOL" in
		"make")		CMAKE_MAKETOOL="$CMAKE_MAKETOOL --debug=b";;
		"ninja")	CMAKE_MAKETOOL="$CMAKE_MAKETOOL -v";;
	esac

	## Collect all available options
	# Feature selection (-DWITH...)
	dlg_opts=()
	for o in $(grep -E "[Oo][Pp][Tt][Ii][Oo][Nn]\s*\(\s*WITH_.*" CMakeLists.txt | cut -d' ' -f2)
	do
		description=$(grep -E "# $o" CMakeLists.txt | cut -d' ' -f 3- | sed 's:^\s*::g')
		dlg_opts+=( $o "$description" off )
		echo "Added option $o"
	done
	[ ${#dlg_opts[@]} -eq 0 ] \
		&& echo "  + No selectable options/features" \
		|| {
			dlg=(dialog --stdout --checklist "Select features/options to build with" 30 80 28)
			CMAKE_WITHOPTS=$("${dlg[@]}" "${dlg_opts[@]}")
			unset dlg
		}
	unset dlg_opts

	# Buildlist selection (-DBUILD...)
	dlg_opts=()
	for o in $(grep -E "[Oo][Pp][Tt][Ii][Oo][Nn]\s*\(\s*BUILD_.*" CMakeLists.txt | cut -d' ' -f2)
	do
		# TODO: in search of a better description
		dlg_opts+=( $o "Build target $o" off )
	done
	[ ${#dlg_opts[@]} -eq 0 ] \
		&& echo "  + No selectable build targets" \
		|| {
			dlg=(dialog --stdout --checklist "Select targets to include in build" 30 80 28)
			CMAKE_BUILDOPTS=$("${dlg[@]}" "${dlg_opts[@]}")
			unset dlg
		}
	unset dlg_opts

	[ -n "$CMAKE_WITHOPTS" ] && echo "  - Selected features: ${CMAKE_WITHOPTS}"
	[ -n "$CMAKE_BUILDOPTS" ] && echo "  - Selected targets:  ${CMAKE_BUILDOPTS}"
}
[ "$BUILDWITH" == "Autotools" ] && {
	AUTOFLAGS=()
	case "$BUILD_MODE" in
		"Release")
			AUTOFLAGS+="--disable-debug"
			echo -e "  - Autotools build type:\twithout debugging symbols";;
		"Debug")
			AUTOFLAGS+="--enable-debug"
			echo -e "  - Autotools build type:\twith debugging symbols";;
	esac

	# Library directory name hack
	[ $TDELIBDIRNAME == "trinity" ] || {
		LIBDIRNAMEHACK="
# Library directory hack
sed -i 's:\(\${libdir}/\)trinity:\1$TDELIBDIRNAME:g' admin/acinclude.m4.in
sed -i 's:trinity\(/plugins/designer\):$TDELIBDIRNAME\1:g' admin/acinclude.m4.in
"
	}
}

cd $CWD ; unset CWD
SLKBUILD=${PKGNAME}.SlackBuild

echo "- Writing $SLKBUILD"
[ -f $SLKBUILD ] && rm -f $SLKBUILD
cat  >> $SLKBUILD << EOF
#!/bin/sh
# Generated by GenTDESB ${VERSION} (Copyright © 2021 Mavridis Philippe)
#
# Based on TDE SlackBuilds from Ray-V:
#     https://github.com/Ray-V/tde-slackbuilds
#
# and the Inkscape SlackBuild by Robby Workman:
#     http://slackbuilds.org/repository/14.2/graphics/inkscape/
#
#   Permission to use, copy, modify, and distribute this software for
#   any purpose with or without fee is hereby granted, provided that
#   the above copyright notice and this permission notice appear in all
#   copies.
#
#   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#   IN NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.

PKGNAM=${PKGNAME}
PRGNAM=${PROGNAME}
VERSION=${PROGVER}
BUILD=\${BUILD:-1}
TAG=${PKGTAG}

if [ -z "\$ARCH" ]; then
  case "\$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=\$( uname -m ) ;;
  esac
fi

CWD=\$(pwd)
TMP=\${TMP:-/tmp/tdesb}
PKG=\$TMP/pkg
OUTPUT=\${OUTPUT:-/tmp}

TDEPREFIX=${TDEPREFIX}
TDESYSCONFDIR=${TDESYSCONFDIR}

if [ "\$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "\$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "\$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

test -d \$OUTPUT || mkdir -p \$OUTPUT
test -d \$PKG && rm -r \$PKG
mkdir -p \$PKG

# Copy source code to temporary directory
test -d \$TMP && rm -r \$TMP
cp -r \$PRGNAM \$TMP
cd \$TMP

# If it's a git repo, try to update submodules
[ -d .git ] && git submodule update --init

EOF

case $BUILDWITH in
	"configure.py")
		cat >> $SLKBUILD << EOF
python configure.py || exit \$?
DESTDIR=\$PKG make \$MAKEFLAGS install || exit \$?
EOF
	;;
	"setup.py")
		cat >> $SLKBUILD << EOF
python setup.py build || exit \$?
python setup.py install \\
	--kde-prefix=\$TDEPREFIX \\
	--root=\$PKG \\
	|| exit \$?
EOF
	;;
	"Autotools") # CHECKME: TQTDIR
		cat >> $SLKBUILD << EOF
$LIBDIRNAMEHACK
cp -Rp /usr/share/aclocal/libtool.m4 admin/libtool.m4.in
cp -Rp /usr/share/libtool/build-aux/ltmain.sh admin/ltmain.sh
make -f admin/Makefile.common || exit \$?

CFLAGS="\${SLKCFLAGS}" CXXFLAGS="\${SLKCFLAGS}" \\
./configure \\
	--prefix=\${TDEPREFIX} \\
	--sysconfdir=\${TDESYSCONFDIR} \\
	--libdir=\$TDEPREFIX/lib\${LIBDIRSUFFIX} \\
	--with-tqt-dir=\$TDEPREFIX/lib\${LIBDIRSUFFIX} \\
EOF
		for opt in $AUTOFLAGS
		do
			echo -e "\t${opt} \\" >> $SLKBUILD
		done
		cat >> $SLKBUILD << EOF
	|| exit \$?

DESTDIR=\$PKG make \$MAKEFLAGS install || exit \$?
EOF
	;;
	"CMake")
		cat >> $SLKBUILD << EOF
cmake -B build -G "$CMAKE_GENERATOR" \
	-DCMAKE_C_FLAGS:STRING="\${SLKCFLAGS}" \\
	-DCMAKE_CXX_FLAGS:STRING="\${SLKCFLAGS}" \\
	-DCMAKE_INSTALL_PREFIX="\${TDEPREFIX}" \\
	-DSYSCONF_INSTALL_DIR="\${TDESYSCONFDIR}" \\
	-DLIB_SUFFIX=\${LIBDIRSUFFIX} \\
	-DPLUGIN_INSTALL_DIR="\${TDEPREFIX}/lib\${LIBDIRSUFFIX}/tde" \\
EOF
		for opt in $CMAKE_WITHOPTS $CMAKE_BUILDOPTS
		do
			echo -e "\t-D${opt}=\"ON\" \\" >> $SLKBUILD
		done	

		cat >> $SLKBUILD << EOF
	-DCMAKE_BUILD_TYPE="$BUILD_MODE" \\
	|| exit \$?
cd build
DESTDIR=\$PKG $CMAKE_MAKETOOL \$MAKEFLAGS install || exit \$?
EOF
esac

# TODO: read slack-desc from a file
cat >> $SLKBUILD << EOF

# Strip binaries
find \$PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \\
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true


find \$PKG/\$TDEPREFIX/share/man -type f -exec gzip -9 {} 2>/dev/null
find \$PKG/\$TDEPREFIX/share/doc -type f -exec chmod 644 {} 2>/dev/null

mkdir -p \$PKG/install

# slack-desc installation should be here

cd \$PKG
/sbin/makepkg -l y -c n \$OUTPUT/\$PKGNAM-\$VERSION-\$ARCH-\$BUILD\$TAG.\${PKGTYPE:-tgz}
EOF

chmod +x $SLKBUILD
echo "Generation successful: $SLKBUILD"
exit 0
